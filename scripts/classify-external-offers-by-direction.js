#!/usr/bin/env node

/**
 * Script de classification des offres externes par direction
 * 
 * Ce script analyse toutes les offres d'emploi marqu√©es comme "externes"
 * et les classe automatiquement selon la structure organisationnelle de la SEEG.
 * 
 * Usage: node scripts/classify-external-offers-by-direction.js
 */

import { createClient } from '@supabase/supabase-js';

// Configuration Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// Structure organisationnelle compl√®te
const DIRECTIONS = {
  'coordination-regions': {
    name: 'Coordination R√©gions',
    keywords: ['d√©l√©gation', 'coordination', 'r√©gion', 'ntoum', 'nord', 'littoral', 'centre sud', 'est']
  },
  'departement-support': {
    name: 'D√©partement Support',
    keywords: ['support', 'd√©partement support']
  },
  'direction-commerciale': {
    name: 'Direction Commerciale & Recouvrement',
    keywords: ['commercial', 'recouvrement', 'facturation', 'client√®le', 'relations clients', 'pr√©paiement', 'tr√©sorerie']
  },
  'direction-audit': {
    name: 'Direction de l\'Audit & Contr√¥le Interne',
    keywords: ['audit', 'contr√¥le interne', 'audit interne', 'contr√¥le']
  },
  'direction-moyens-generaux': {
    name: 'Direction des Moyens G√©n√©raux',
    keywords: ['moyens g√©n√©raux', 'logistique', 'transport', 'achats', 'patrimoine', 'automobile', 's√ªret√©', 'stocks']
  },
  'direction-dsi': {
    name: 'Direction des Syst√®mes d\'Information',
    keywords: ['syst√®mes d\'information', 'dsi', 'cybers√©curit√©', 'infrastructure', 'applications', 'bases de donn√©es', 'digitalisation', 'r√©seaux', 'sig', 'cartographie']
  },
  'direction-capital-humain': {
    name: 'Direction du Capital Humain',
    keywords: ['capital humain', 'rh', 'carri√®re', 'paie', 'recrutement', 'm√©tiers', 'centre des m√©tiers', 'dialogue social', 'r√©glementation', 'sant√©']
  },
  'direction-exploitation-eau': {
    name: 'Direction Exploitation Eau',
    keywords: ['exploitation', 'production', 'distribution', 'maintenance', 'conduite', 'hydraulique', 'transport', 'eau']
  },
  'direction-exploitation-electricite': {
    name: 'Direction Exploitation √âlectricit√©',
    keywords: ['exploitation', 'production', 'distribution', 'maintenance', 'thermique', 'mouvement d\'√©nergie', '√©lectricit√©']
  },
  'direction-finances': {
    name: 'Direction Finances & Comptabilit√©',
    keywords: ['finances', 'comptabilit√©', 'tr√©sorerie', 'budget', 'contr√¥le de gestion', 'comptable']
  },
  'direction-juridique': {
    name: 'Direction Juridique, Communication & RSE',
    keywords: ['juridique', 'communication', 'rse', 'responsabilit√© soci√©tale', 'entreprise']
  },
  'direction-qualite': {
    name: 'Direction Qualit√© Hygi√®ne S√©curit√© et Environnement',
    keywords: ['qualit√©', 'hygi√®ne', 's√©curit√©', 'environnement', 'risques', 'performance op√©rationnelle']
  },
  'direction-technique-eau': {
    name: 'Direction Technique Eau',
    keywords: ['technique', '√©tudes', 'travaux', 'support technique', 'eau']
  },
  'direction-technique-electricite': {
    name: 'Direction Technique √âlectricit√©',
    keywords: ['technique', '√©tudes', 'travaux', 'production', 'transport', 'distribution', '√©lectricit√©']
  }
};

/**
 * Classifie une offre selon son titre
 * @param {string} title - Titre de l'offre
 * @returns {string} - ID de la direction ou 'non-classifiee'
 */
function classifyOfferByTitle(title) {
  if (!title) return 'non-classifiee';
  
  const lowerTitle = title.toLowerCase();
  
  // Parcourir toutes les directions
  for (const [directionId, direction] of Object.entries(DIRECTIONS)) {
    // V√©rifier si le titre contient un mot-cl√© de cette direction
    for (const keyword of direction.keywords) {
      if (lowerTitle.includes(keyword.toLowerCase())) {
        return directionId;
      }
    }
  }
  
  return 'non-classifiee';
}

/**
 * R√©cup√®re toutes les offres externes
 */
async function getExternalOffers() {
  try {
    console.log('üìä R√©cup√©ration des offres externes...');
    
    const { data: offers, error } = await supabase
      .from('job_offers')
      .select('id, title, status_offerts, department, created_at')
      .or('status_offerts.eq.externe,status_offerts.is.null');
    
    if (error) {
      throw error;
    }
    
    console.log(`‚úÖ ${offers.length} offres externes trouv√©es`);
    return offers;
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des offres:', error.message);
    throw error;
  }
}

/**
 * Met √† jour la direction d'une offre
 */
async function updateOfferDirection(offerId, directionId) {
  try {
    const { error } = await supabase
      .from('job_offers')
      .update({ 
        department: directionId,
        updated_at: new Date().toISOString()
      })
      .eq('id', offerId);
    
    if (error) {
      throw error;
    }
    
    return true;
  } catch (error) {
    console.error(`‚ùå Erreur lors de la mise √† jour de l'offre ${offerId}:`, error.message);
    return false;
  }
}

/**
 * G√©n√®re un rapport de classification
 */
function generateReport(classifications) {
  console.log('\nüìã RAPPORT DE CLASSIFICATION');
  console.log('='.repeat(50));
  
  const stats = {
    total: classifications.length,
    classifiees: 0,
    nonClassifiees: 0,
    parDirection: {}
  };
  
  // Compter les classifications
  classifications.forEach(classification => {
    if (classification.directionId === 'non-classifiee') {
      stats.nonClassifiees++;
    } else {
      stats.classifiees++;
      if (!stats.parDirection[classification.directionId]) {
        stats.parDirection[classification.directionId] = 0;
      }
      stats.parDirection[classification.directionId]++;
    }
  });
  
  console.log(`üìä Total des offres: ${stats.total}`);
  console.log(`‚úÖ Classifi√©es: ${stats.classifiees}`);
  console.log(`‚ùì Non classifi√©es: ${stats.nonClassifiees}`);
  console.log(`üìà Taux de classification: ${((stats.classifiees / stats.total) * 100).toFixed(1)}%`);
  
  console.log('\nüìÅ R√©partition par direction:');
  Object.entries(stats.parDirection)
    .sort(([,a], [,b]) => b - a)
    .forEach(([directionId, count]) => {
      const directionName = DIRECTIONS[directionId]?.name || directionId;
      console.log(`  ‚Ä¢ ${directionName}: ${count} offre(s)`);
    });
  
  if (stats.nonClassifiees > 0) {
    console.log('\n‚ùì Offres non classifi√©es:');
    classifications
      .filter(c => c.directionId === 'non-classifiee')
      .forEach(classification => {
        console.log(`  ‚Ä¢ "${classification.title}"`);
      });
  }
  
  return stats;
}

/**
 * Fonction principale
 */
async function main() {
  try {
    console.log('üöÄ D√âMARRAGE DU SCRIPT DE CLASSIFICATION');
    console.log('='.repeat(50));
    
    // R√©cup√©rer les offres externes
    const offers = await getExternalOffers();
    
    if (offers.length === 0) {
      console.log('‚ÑπÔ∏è  Aucune offre externe trouv√©e');
      return;
    }
    
    // Classifier chaque offre
    console.log('\nüîç Classification des offres...');
    const classifications = offers.map(offer => {
      const directionId = classifyOfferByTitle(offer.title);
      return {
        ...offer,
        directionId,
        directionName: DIRECTIONS[directionId]?.name || 'Non classifi√©e'
      };
    });
    
    // G√©n√©rer le rapport
    const stats = generateReport(classifications);
    
    // Demander confirmation pour la mise √† jour
    console.log('\n‚ö†Ô∏è  ATTENTION: Ce script va modifier la base de donn√©es');
    console.log('Voulez-vous continuer avec la mise √† jour? (y/N)');
    
    // En mode script, on peut ajouter une option pour forcer la mise √† jour
    const forceUpdate = process.argv.includes('--force');
    
    if (forceUpdate) {
      console.log('üîÑ Mise √† jour forc√©e activ√©e');
    } else {
      console.log('‚ÑπÔ∏è  Utilisez --force pour forcer la mise √† jour sans confirmation');
      console.log('‚úÖ Script termin√© (mode simulation)');
      return;
    }
    
    // Mettre √† jour les offres classifi√©es
    console.log('\nüíæ Mise √† jour de la base de donn√©es...');
    let updatedCount = 0;
    let errorCount = 0;
    
    for (const classification of classifications) {
      if (classification.directionId !== 'non-classifiee') {
        const success = await updateOfferDirection(classification.id, classification.directionId);
        if (success) {
          updatedCount++;
          console.log(`‚úÖ "${classification.title}" ‚Üí ${classification.directionName}`);
        } else {
          errorCount++;
        }
      }
    }
    
    console.log('\nüéâ CLASSIFICATION TERMIN√âE');
    console.log('='.repeat(50));
    console.log(`‚úÖ Offres mises √† jour: ${updatedCount}`);
    if (errorCount > 0) {
      console.log(`‚ùå Erreurs: ${errorCount}`);
    }
    
  } catch (error) {
    console.error('üí• Erreur fatale:', error.message);
    process.exit(1);
  }
}

// Ex√©cuter le script
main();

export {
  classifyOfferByTitle,
  DIRECTIONS,
  getExternalOffers,
  updateOfferDirection
};
