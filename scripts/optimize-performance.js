#!/usr/bin/env node

/**
 * Script d'optimisation des performances pour Talent Flow
 * Ce script applique les optimisations et v√©rifie les performances
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ D√©marrage de l\'optimisation des performances...\n');

// 1. V√©rifier que Supabase CLI est install√©
try {
  execSync('supabase --version', { stdio: 'pipe' });
  console.log('‚úÖ Supabase CLI d√©tect√©');
} catch (error) {
  console.error('‚ùå Supabase CLI non trouv√©. Installez-le avec: npm install -g supabase');
  process.exit(1);
}

// 2. Appliquer les migrations
console.log('\nüìä Application des migrations d\'optimisation...');
try {
  execSync('supabase db push', { stdio: 'inherit' });
  console.log('‚úÖ Migrations appliqu√©es avec succ√®s');
} catch (error) {
  console.error('‚ùå Erreur lors de l\'application des migrations:', error.message);
  process.exit(1);
}

// 3. V√©rifier la structure des fichiers optimis√©s
console.log('\nüîç V√©rification des fichiers optimis√©s...');

const filesToCheck = [
  'src/hooks/useOptimizedCache.ts',
  'src/hooks/useOptimizedProtocol1Evaluation.ts',
  'src/utils/monitoring/performanceOptimizer.ts',
  'src/integrations/supabase/client.ts'
];

filesToCheck.forEach(file => {
  const filePath = path.join(__dirname, '..', file);
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${file} - Pr√©sent`);
  } else {
    console.log(`‚ùå ${file} - Manquant`);
  }
});

// 4. G√©n√©rer un rapport d'optimisation
console.log('\nüìã G√©n√©ration du rapport d\'optimisation...');

const report = `
# Rapport d'Optimisation des Performances
Date: ${new Date().toISOString()}

## Optimisations Appliqu√©es

### 1. Base de Donn√©es
- ‚úÖ Index ajout√©s sur les colonnes fr√©quemment utilis√©es
- ‚úÖ Politiques RLS optimis√©es
- ‚úÖ Fonctions helper pour les permissions
- ‚úÖ Vue mat√©rialis√©e pour les statistiques

### 2. Code Frontend
- ‚úÖ Client Supabase optimis√©
- ‚úÖ Syst√®me de cache intelligent
- ‚úÖ Debouncing des sauvegardes automatiques
- ‚úÖ Monitoring des performances

### 3. Requ√™tes
- ‚úÖ Requ√™tes SELECT all√©g√©es
- ‚úÖ D√©lais de sauvegarde augment√©s
- ‚úÖ Cache avec TTL configurable

## Prochaines √âtapes

1. **Imm√©diat** (aujourd'hui)
   - Remplacer useProtocol1Evaluation par useOptimizedProtocol1Evaluation
   - Surveiller les m√©triques de performance
   - V√©rifier la r√©duction de la charge IO

2. **Court terme** (cette semaine)
   - Impl√©menter la pagination sur les listes
   - Ajouter React.memo aux composants lourds
   - Optimiser les requ√™tes restantes

3. **Moyen terme** (ce mois)
   - Consid√©rer une mise √† niveau Supabase Pro
   - Impl√©menter un cache Redis
   - Ajouter un CDN

## Surveillance

Utilisez le monitoring int√©gr√© pour surveiller :
- Temps de r√©ponse des requ√™tes
- Taux de hit du cache
- Nombre de requ√™tes lentes
- Utilisation des ressources

## Support

En cas de probl√®me :
1. Consultez PERFORMANCE_OPTIMIZATION_GUIDE.md
2. V√©rifiez les logs Supabase
3. Utilisez le monitoring int√©gr√©
`;

fs.writeFileSync(
  path.join(__dirname, '..', 'PERFORMANCE_OPTIMIZATION_REPORT.md'),
  report
);

console.log('‚úÖ Rapport g√©n√©r√©: PERFORMANCE_OPTIMIZATION_REPORT.md');

// 5. Instructions finales
console.log('\nüéâ Optimisation termin√©e !');
console.log('\nüìù Prochaines √©tapes :');
console.log('1. Remplacez useProtocol1Evaluation par useOptimizedProtocol1Evaluation dans vos composants');
console.log('2. Surveillez les m√©triques de performance dans les prochaines heures');
console.log('3. Consultez PERFORMANCE_OPTIMIZATION_GUIDE.md pour plus de d√©tails');
console.log('\n‚ö†Ô∏è  Important : Ces optimisations devraient r√©duire significativement votre charge IO.');
console.log('   Surveillez votre dashboard Supabase pour confirmer l\'am√©lioration.');

console.log('\n‚ú® Optimisation des performances termin√©e avec succ√®s !');
