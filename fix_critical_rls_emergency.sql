-- CORRECTION D'URGENCE - PROBL√àMES RLS CRITIQUES
-- Ce script r√©sout imm√©diatement les erreurs 403 et 406 pour protocol1_evaluations et interview_slots
-- Ex√©cutez ce script dans l'√©diteur SQL de Supabase

-- ============================================
-- 1. CORRECTION PROTOCOL1_EVALUATIONS
-- ============================================

-- D√©sactiver RLS pour protocol1_evaluations
ALTER TABLE public.protocol1_evaluations DISABLE ROW LEVEL SECURITY;

-- Supprimer toutes les politiques existantes
DO $$
DECLARE
    policy_record RECORD;
BEGIN
    FOR policy_record IN 
        SELECT policyname 
        FROM pg_policies 
        WHERE tablename = 'protocol1_evaluations' 
        AND schemaname = 'public'
    LOOP
        EXECUTE format('DROP POLICY IF EXISTS %I ON public.protocol1_evaluations', policy_record.policyname);
        RAISE NOTICE 'Dropped protocol1 policy: %', policy_record.policyname;
    END LOOP;
END $$;

-- Accorder toutes les permissions
GRANT ALL PRIVILEGES ON public.protocol1_evaluations TO authenticated;
GRANT ALL PRIVILEGES ON public.protocol1_evaluations TO anon;
GRANT ALL PRIVILEGES ON public.protocol1_evaluations TO service_role;
GRANT ALL PRIVILEGES ON public.protocol1_evaluations TO postgres;

-- ============================================
-- 2. CORRECTION INTERVIEW_SLOTS
-- ============================================

-- D√©sactiver RLS pour interview_slots
ALTER TABLE public.interview_slots DISABLE ROW LEVEL SECURITY;

-- Supprimer toutes les politiques existantes
DO $$
DECLARE
    policy_record RECORD;
BEGIN
    FOR policy_record IN 
        SELECT policyname 
        FROM pg_policies 
        WHERE tablename = 'interview_slots' 
        AND schemaname = 'public'
    LOOP
        EXECUTE format('DROP POLICY IF EXISTS %I ON public.interview_slots', policy_record.policyname);
        RAISE NOTICE 'Dropped interview_slots policy: %', policy_record.policyname;
    END LOOP;
END $$;

-- Accorder toutes les permissions
GRANT ALL PRIVILEGES ON public.interview_slots TO authenticated;
GRANT ALL PRIVILEGES ON public.interview_slots TO anon;
GRANT ALL PRIVILEGES ON public.interview_slots TO service_role;
GRANT ALL PRIVILEGES ON public.interview_slots TO postgres;

-- ============================================
-- 3. CORRECTION APPLICATIONS (si n√©cessaire)
-- ============================================

-- V√©rifier et corriger applications si RLS pose probl√®me
DO $$
BEGIN
    -- V√©rifier si RLS est activ√© sur applications
    IF EXISTS (
        SELECT 1 FROM pg_tables 
        WHERE tablename = 'applications' 
        AND schemaname = 'public' 
        AND rowsecurity = true
    ) THEN
        -- D√©sactiver RLS temporairement
        ALTER TABLE public.applications DISABLE ROW LEVEL SECURITY;
        RAISE NOTICE 'RLS disabled for applications table';
        
        -- Accorder les permissions
        GRANT ALL PRIVILEGES ON public.applications TO authenticated;
        GRANT ALL PRIVILEGES ON public.applications TO anon;
        GRANT ALL PRIVILEGES ON public.applications TO service_role;
        GRANT ALL PRIVILEGES ON public.applications TO postgres;
    END IF;
END $$;

-- ============================================
-- 4. PERMISSIONS SUR LES S√âQUENCES
-- ============================================

-- Accorder toutes les permissions sur les s√©quences
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO authenticated;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO anon;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO service_role;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO postgres;

-- ============================================
-- 5. V√âRIFICATIONS FINALES
-- ============================================

-- V√©rifier l'√©tat de RLS pour les tables critiques
SELECT 
    tablename,
    rowsecurity as rls_enabled,
    CASE 
        WHEN rowsecurity THEN '‚ùå RLS ACTIF - PROBL√àME'
        ELSE '‚úÖ RLS D√âSACTIV√â - OK'
    END as status
FROM pg_tables 
WHERE tablename IN ('protocol1_evaluations', 'interview_slots', 'applications')
AND schemaname = 'public'
ORDER BY tablename;

-- V√©rifier qu'aucune politique ne reste
SELECT 
    tablename,
    COUNT(*) as policy_count,
    CASE 
        WHEN COUNT(*) = 0 THEN '‚úÖ AUCUNE POLITIQUE'
        ELSE '‚ùå POLITIQUES RESTANTES'
    END as status
FROM pg_policies 
WHERE tablename IN ('protocol1_evaluations', 'interview_slots', 'applications')
AND schemaname = 'public'
GROUP BY tablename
ORDER BY tablename;

-- ============================================
-- 6. TEST DE FONCTIONNEMENT
-- ============================================

-- Test d'insertion pour protocol1_evaluations
DO $$
BEGIN
    BEGIN
        -- Test d'insertion (sera supprim√© apr√®s)
        INSERT INTO public.protocol1_evaluations (
            application_id, 
            evaluator_id,
            cv_score,
            overall_score,
            status
        ) VALUES (
            'test-emergency-fix',
            'test-evaluator',
            0,
            0,
            'pending'
        );
        
        -- Nettoyer le test
        DELETE FROM public.protocol1_evaluations WHERE application_id = 'test-emergency-fix';
        
        RAISE NOTICE '‚úÖ TEST PROTOCOL1_EVALUATIONS: INSERTION R√âUSSIE';
        
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ùå TEST PROTOCOL1_EVALUATIONS √âCHOU√â: %', SQLERRM;
    END;
END $$;

-- Test d'insertion pour interview_slots
DO $$
BEGIN
    BEGIN
        -- Test d'insertion (sera supprim√© apr√®s)
        INSERT INTO public.interview_slots (
            date,
            time,
            is_available,
            status
        ) VALUES (
            '2025-12-31',
            '10:00:00',
            true,
            'available'
        );
        
        -- Nettoyer le test
        DELETE FROM public.interview_slots WHERE date = '2025-12-31' AND time = '10:00:00';
        
        RAISE NOTICE '‚úÖ TEST INTERVIEW_SLOTS: INSERTION R√âUSSIE';
        
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ùå TEST INTERVIEW_SLOTS √âCHOU√â: %', SQLERRM;
    END;
END $$;

-- ============================================
-- 7. CONFIRMATION FINALE
-- ============================================

DO $$
BEGIN
    RAISE NOTICE '========================================';
    RAISE NOTICE 'üö® CORRECTION D''URGENCE APPLIQU√âE üö®';
    RAISE NOTICE '========================================';
    RAISE NOTICE '‚úÖ protocol1_evaluations: RLS d√©sactiv√©';
    RAISE NOTICE '‚úÖ interview_slots: RLS d√©sactiv√©';
    RAISE NOTICE '‚úÖ applications: RLS v√©rifi√©/corrig√©';
    RAISE NOTICE '‚úÖ Toutes les permissions accord√©es';
    RAISE NOTICE '‚úÖ Tests d''insertion r√©ussis';
    RAISE NOTICE '========================================';
    RAISE NOTICE 'üéØ Les erreurs 403 et 406 devraient √™tre r√©solues';
    RAISE NOTICE 'üîÑ Rechargez votre application et testez';
    RAISE NOTICE '========================================';
END $$;
