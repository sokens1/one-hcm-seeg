/**
 * Suite de tests automatis√©s pour valider la pr√©vention des erreurs DOM
 * Garantit que le syst√®me fonctionne correctement
 */

import { domErrorPrevention, safeInnerHTML, safeDOMOperation } from './domErrorPrevention';

export interface TestResult {
  name: string;
  passed: boolean;
  error?: string;
  duration: number;
}

export interface TestSuite {
  results: TestResult[];
  totalTests: number;
  passedTests: number;
  failedTests: number;
  duration: number;
  overallSuccess: boolean;
}

/**
 * Classe pour ex√©cuter les tests de pr√©vention DOM
 */
export class DOMErrorTestSuite {
  private results: TestResult[] = [];

  /**
   * Ex√©cute un test individuel
   */
  private async runTest(name: string, testFn: () => void | Promise<void>): Promise<TestResult> {
    const startTime = Date.now();
    
    try {
      await testFn();
      const duration = Date.now() - startTime;
      
      return {
        name,
        passed: true,
        duration
      };
    } catch (error) {
      const duration = Date.now() - startTime;
      
      return {
        name,
        passed: false,
        error: error instanceof Error ? error.message : String(error),
        duration
      };
    }
  }

  /**
   * Test 1: HTML s√©curis√© avec caract√®res sp√©ciaux
   */
  private async testSafeHTMLWithSpecialChars() {
    const maliciousHTML = '<script>alert("xss")</script><p>Contenu normal</p>';
    const result = safeInnerHTML(maliciousHTML);
    
    // V√©rifier que le script est √©chapp√©
    if (result.__html.includes('<script>')) {
      throw new Error('Script malveillant non √©chapp√©');
    }
    
    // V√©rifier que le contenu normal est pr√©serv√©
    if (!result.__html.includes('Contenu normal')) {
      throw new Error('Contenu normal perdu');
    }
  }

  /**
   * Test 2: HTML avec caract√®res de contr√¥le
   */
  private async testHTMLWithControlChars() {
    const htmlWithControlChars = 'Texte\u0000normal\u001Favec\u007Fcaract√®res';
    const result = safeInnerHTML(htmlWithControlChars);
    
    // V√©rifier que les caract√®res de contr√¥le sont supprim√©s
    if (result.__html.includes('\u0000') || result.__html.includes('\u001F') || result.__html.includes('\u007F')) {
      throw new Error('Caract√®res de contr√¥le non supprim√©s');
    }
  }

  /**
   * Test 3: HTML malform√©
   */
  private async testMalformedHTML() {
    const malformedHTML = '<p>Texte <strong>gras</p> <div>Non ferm√©';
    const result = safeInnerHTML(malformedHTML);
    
    // Le r√©sultat doit √™tre valide m√™me si l'input est malform√©
    if (!result.__html || result.__html.length === 0) {
      throw new Error('HTML malform√© non g√©r√©');
    }
  }

  /**
   * Test 4: Op√©rations DOM s√©curis√©es
   */
  private async testSafeDOMOperations() {
    // Test d'op√©ration DOM qui peut √©chouer
    const result = safeDOMOperation(() => {
      const div = document.createElement('div');
      div.innerHTML = '<p>Test</p>';
      return div.innerHTML;
    }, 'fallback');
    
    if (!result || result === 'fallback') {
      throw new Error('Op√©ration DOM s√©curis√©e a √©chou√©');
    }
  }

  /**
   * Test 5: Gestion des erreurs removeChild simul√©es
   */
  private async testRemoveChildErrorHandling() {
    const initialStats = domErrorPrevention.getStats();
    
    // Simuler une erreur removeChild
    try {
      const div = document.createElement('div');
      document.body.appendChild(div);
      // Tenter de supprimer un √©l√©ment qui n'est pas un enfant
      document.body.removeChild(div);
      document.body.removeChild(div); // Cette ligne devrait causer une erreur
    } catch (error) {
      // L'erreur devrait √™tre captur√©e par le syst√®me
    }
    
    // V√©rifier que l'erreur a √©t√© enregistr√©e
    const newStats = domErrorPrevention.getStats();
    if (newStats.totalErrors <= initialStats.totalErrors) {
      throw new Error('Erreur removeChild non captur√©e');
    }
  }

  /**
   * Test 6: Performance du syst√®me
   */
  private async testPerformance() {
    const startTime = Date.now();
    
    // Ex√©cuter 100 op√©rations de nettoyage HTML
    for (let i = 0; i < 100; i++) {
      safeInnerHTML(`<p>Test ${i}</p>`);
    }
    
    const duration = Date.now() - startTime;
    
    // V√©rifier que les op√©rations sont rapides (moins de 100ms pour 100 op√©rations)
    if (duration > 100) {
      throw new Error(`Performance insuffisante: ${duration}ms pour 100 op√©rations`);
    }
  }

  /**
   * Test 7: R√©cup√©ration automatique
   */
  private async testAutoRecovery() {
    const isHealthyBefore = domErrorPrevention.isHealthy();
    
    // D√©clencher une r√©cup√©ration
    window.dispatchEvent(new CustomEvent('dom-error-recovery'));
    
    // Attendre un peu pour que la r√©cup√©ration se fasse
    await new Promise(resolve => setTimeout(resolve, 100));
    
    const isHealthyAfter = domErrorPrevention.isHealthy();
    
    // Le syst√®me devrait rester sain ou se r√©tablir
    if (!isHealthyAfter && isHealthyBefore) {
      throw new Error('R√©cup√©ration automatique a √©chou√©');
    }
  }

  /**
   * Test 8: Statistiques et monitoring
   */
  private async testStatsAndMonitoring() {
    const stats = domErrorPrevention.getStats();
    
    // V√©rifier que les statistiques sont valides
    if (typeof stats.totalErrors !== 'number' || stats.totalErrors < 0) {
      throw new Error('Statistiques invalides');
    }
    
    if (typeof stats.removeChildErrors !== 'number' || stats.removeChildErrors < 0) {
      throw new Error('Statistiques removeChild invalides');
    }
    
    // V√©rifier le rapport de sant√©
    const healthReport = domErrorPrevention.generateHealthReport();
    if (!healthReport || healthReport.length === 0) {
      throw new Error('Rapport de sant√© vide');
    }
  }

  /**
   * Ex√©cute tous les tests
   */
  async runAllTests(): Promise<TestSuite> {
    const startTime = Date.now();
    this.results = [];

    console.log('üß™ D√©marrage de la suite de tests DOM Error Prevention...');

    // Ex√©cuter tous les tests
    this.results.push(await this.runTest('HTML s√©curis√© avec caract√®res sp√©ciaux', () => this.testSafeHTMLWithSpecialChars()));
    this.results.push(await this.runTest('HTML avec caract√®res de contr√¥le', () => this.testHTMLWithControlChars()));
    this.results.push(await this.runTest('HTML malform√©', () => this.testMalformedHTML()));
    this.results.push(await this.runTest('Op√©rations DOM s√©curis√©es', () => this.testSafeDOMOperations()));
    this.results.push(await this.runTest('Gestion des erreurs removeChild', () => this.testRemoveChildErrorHandling()));
    this.results.push(await this.runTest('Performance du syst√®me', () => this.testPerformance()));
    this.results.push(await this.runTest('R√©cup√©ration automatique', () => this.testAutoRecovery()));
    this.results.push(await this.runTest('Statistiques et monitoring', () => this.testStatsAndMonitoring()));

    const duration = Date.now() - startTime;
    const passedTests = this.results.filter(r => r.passed).length;
    const failedTests = this.results.filter(r => !r.passed).length;

    const suite: TestSuite = {
      results: this.results,
      totalTests: this.results.length,
      passedTests,
      failedTests,
      duration,
      overallSuccess: failedTests === 0
    };

    this.logResults(suite);
    return suite;
  }

  /**
   * Affiche les r√©sultats des tests
   */
  private logResults(suite: TestSuite) {
    console.log('\nüìä R√âSULTATS DES TESTS DOM ERROR PREVENTION');
    console.log('='.repeat(50));
    
    suite.results.forEach(result => {
      const status = result.passed ? '‚úÖ' : '‚ùå';
      const duration = `${result.duration}ms`;
      console.log(`${status} ${result.name} (${duration})`);
      
      if (!result.passed && result.error) {
        console.log(`   Erreur: ${result.error}`);
      }
    });
    
    console.log('='.repeat(50));
    console.log(`üìà Total: ${suite.passedTests}/${suite.totalTests} tests r√©ussis`);
    console.log(`‚è±Ô∏è  Dur√©e totale: ${suite.duration}ms`);
    console.log(`üéØ Statut: ${suite.overallSuccess ? '‚úÖ TOUS LES TESTS R√âUSSIS' : '‚ùå CERTAINS TESTS ONT √âCHOU√â'}`);
    
    if (suite.overallSuccess) {
      console.log('\nüéâ F√âLICITATIONS ! Le syst√®me de pr√©vention des erreurs DOM fonctionne parfaitement.');
      console.log('   Vous ne devriez plus jamais avoir de probl√®me removeChild !');
    } else {
      console.log('\n‚ö†Ô∏è  ATTENTION ! Certains tests ont √©chou√©. V√©rifiez la configuration.');
    }
  }

  /**
   * Ex√©cute un test de stress pour valider la robustesse
   */
  async runStressTest(iterations: number = 1000): Promise<TestResult> {
    return this.runTest(`Test de stress (${iterations} it√©rations)`, async () => {
      const startTime = Date.now();
      
      for (let i = 0; i < iterations; i++) {
        // G√©n√©rer du HTML al√©atoire avec des caract√®res probl√©matiques
        const randomHTML = this.generateRandomHTML();
        safeInnerHTML(randomHTML);
        
        // Simuler des op√©rations DOM
        safeDOMOperation(() => {
          const div = document.createElement('div');
          div.innerHTML = `<p>Stress test ${i}</p>`;
          return div.innerHTML;
        });
      }
      
      const duration = Date.now() - startTime;
      console.log(`Test de stress termin√© en ${duration}ms`);
    });
  }

  /**
   * G√©n√®re du HTML al√©atoire pour les tests
   */
  private generateRandomHTML(): string {
    const templates = [
      '<p>Texte normal</p>',
      '<script>alert("test")</script><p>Contenu</p>',
      '<div>Non ferm√©',
      'Texte\u0000avec\u001Fcaract√®res\u007Fde contr√¥le',
      '<p>Texte <strong>gras</p>',
      '<img src="x" onerror="alert(1)">',
      '<p>Texte normal avec <a href="#">lien</a></p>'
    ];
    
    return templates[Math.floor(Math.random() * templates.length)];
  }
}

// Instance globale pour les tests
export const domErrorTestSuite = new DOMErrorTestSuite();

// Fonction de test rapide
export const quickTest = async () => {
  console.log('üöÄ Test rapide du syst√®me de pr√©vention DOM...');
  const suite = await domErrorTestSuite.runAllTests();
  return suite.overallSuccess;
};

// Fonction de test complet
export const fullTest = async () => {
  console.log('üî¨ Test complet du syst√®me de pr√©vention DOM...');
  const suite = await domErrorTestSuite.runAllTests();
  
  if (suite.overallSuccess) {
    console.log('üß™ Ex√©cution du test de stress...');
    const stressResult = await domErrorTestSuite.runStressTest(500);
    console.log(`Test de stress: ${stressResult.passed ? '‚úÖ' : '‚ùå'}`);
  }
  
  return suite.overallSuccess;
};

// Auto-test au chargement en mode d√©veloppement
if (import.meta.env.DEV) {
  setTimeout(() => {
    quickTest();
  }, 2000);
}
