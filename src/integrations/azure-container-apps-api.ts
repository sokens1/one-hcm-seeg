/**
 * Service pour l'API Azure Container Apps - RH RVAL
 * Documentation: https://rh-rval-api--1uyr6r3.gentlestone-a545d2f8.canadacentral.azurecontainerapps.io/docs
 */

export interface CandidateData {
  id: string | number;
  Nom: string;
  Pr√©nom: string;
  cv: string;
  lettre_motivation: string;
  MTP: {
    M: string;
    T: string;
    P: string;
  };
  post: string;
}

export interface ApiResponse {
  success: boolean;
  message?: string;
  data?: any;
  error?: string;
}

export interface EvaluationRequest {
  candidate_id: string | number;
  job_title: string;
  cv_content: string;
  cover_letter_content: string;
  candidate_name?: string;
  candidate_firstname?: string;
  mtp_responses?: {
    metier: string[];
    talent: string[];
    paradigme: string[];
  };
}

export interface EvaluationResponse {
  threshold_pct: number;
  scores: {
    score_offre_pct: number;
    score_mtp_pct: number;
    score_global_pct: number;
  };
  commentaires: string[];
  verdict: {
    verdict: string;
    commentaires: string[];
    rationale: string;
  };
  justification: string[];
  forces: string[];
  faiblesses: string[];
}

class AzureContainerAppsService {
  private baseUrl: string;
  private timeout: number;
  private apiKey: string | null;

  constructor() {
    // Configuration pour utiliser le proxy Vercel en production
    if (import.meta.env.DEV) {
      this.baseUrl = '/api/rh-eval';
    } else {
      // En production, utiliser le proxy Vercel pour contourner CORS
      this.baseUrl = '/api/rh-eval-proxy';
    }
    this.timeout = 30000; // 30 secondes
    // Cl√© API pour l'API SEEG AI
    this.apiKey = import.meta.env.VITE_SEEG_AI_API_KEY || 'demo-key';
  }

  /**
   * Mode test - G√©n√®re des donn√©es simul√©es pour tester l'interface
   */
  private generateMockEvaluationData(evaluationData: EvaluationRequest): EvaluationResponse {
    return {
      threshold_pct: 70,
      scores: {
        score_offre_pct: Math.floor(Math.random() * 30) + 70, // 70-100
        score_mtp_pct: Math.floor(Math.random() * 30) + 70,    // 70-100
        score_global_pct: Math.floor(Math.random() * 30) + 70 // 70-100
      },
      commentaires: [
        `Candidat ${evaluationData.candidate_firstname} ${evaluationData.candidate_name} pr√©sente un profil int√©ressant pour le poste de ${evaluationData.job_title}.`,
        'Exp√©rience pertinente dans le domaine requis.',
        'Bonne ad√©quation avec les valeurs de l\'entreprise.',
        'Profil technique solide avec des comp√©tences recherch√©es.'
      ],
      verdict: {
        verdict: Math.random() > 0.3 ? 'Accept√©' : 'En attente',
        commentaires: [
          'Profil technique excellent',
          'Exp√©rience pertinente',
          'Bonne culture d\'√©quipe',
          'Motivation √©vidente'
        ],
        rationale: 'Le candidat r√©pond aux crit√®res techniques et culturels requis pour le poste.'
      },
      justification: [
        `Exp√©rience de ${Math.floor(Math.random() * 10) + 3} ans dans le domaine`,
        'Ma√Ætrise des technologies requises',
        'Exp√©rience en m√©thodologie Agile',
        'Bonne communication et esprit d\'√©quipe',
        'Profil adapt√© aux enjeux du poste'
      ],
      forces: [
        'Exp√©rience solide dans le domaine',
        'Ma√Ætrise des technologies cl√©s',
        'Exp√©rience en m√©thodologie Agile',
        'Bonne communication',
        'Esprit d\'√©quipe',
        'Capacit√© d\'adaptation'
      ],
      faiblesses: [
        'Manque d\'exp√©rience dans certains domaines sp√©cifiques',
        'Anglais technique √† am√©liorer',
        'Exp√©rience limit√©e en management d\'√©quipe'
      ]
    };
  }

  /**
   * Obtenir les en-t√™tes d'authentification
   */
  private getAuthHeaders(): Record<string, string> {
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
    };

    if (this.apiKey) {
      headers['x-api-key'] = this.apiKey;
    }

    return headers;
  }

  /**
   * D√©finir la cl√© API
   */
  setApiKey(apiKey: string): void {
    this.apiKey = apiKey;
    console.log('üîë [Azure Container Apps] Cl√© API d√©finie');
  }

  /**
   * V√©rifier si la cl√© API est configur√©e
   */
  hasApiKey(): boolean {
    return this.apiKey !== null && this.apiKey !== '';
  }

  /**
   * V√©rifier la connectivit√© √† l'API
   */
  async checkConnection(): Promise<boolean> {
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), this.timeout);

      const response = await fetch(`${this.baseUrl}/health`, {
        method: 'GET',
        signal: controller.signal,
        headers: this.getAuthHeaders(),
      });

      clearTimeout(timeoutId);
      return response.ok;
    } catch (error) {
      console.warn('üîß [Azure Container Apps] API non accessible:', error);
      return false;
    }
  }

  /**
   * Envoyer les donn√©es d'un candidat √† l'API
   */
  async sendCandidateData(candidateData: CandidateData): Promise<ApiResponse> {
    try {
      console.log('üì§ [Azure Container Apps] Envoi des donn√©es du candidat:', candidateData.id);
      
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), this.timeout);

      const response = await fetch(`${this.baseUrl}/api/candidats`, {
        method: 'POST',
        signal: controller.signal,
        headers: this.getAuthHeaders(),
        body: JSON.stringify(candidateData),
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        const errorText = await response.text();
        
        // Gestion sp√©cifique des erreurs d'authentification
        if (response.status === 401) {
          throw new Error('Erreur d\'authentification: Cl√© API invalide ou manquante');
        } else if (response.status === 403) {
          throw new Error('Erreur d\'autorisation: Acc√®s refus√©');
        } else {
          throw new Error(`Erreur HTTP ${response.status}: ${errorText}`);
        }
      }

      const result = await response.json();
      
      console.log('‚úÖ [Azure Container Apps] Donn√©es envoy√©es avec succ√®s');
      return {
        success: true,
        message: 'Donn√©es envoy√©es avec succ√®s',
        data: result,
      };

    } catch (error) {
      console.error('‚ùå [Azure Container Apps] Erreur lors de l\'envoi:', error);
      
      if (error instanceof Error) {
        if (error.name === 'AbortError') {
          return {
            success: false,
            error: 'Timeout: L\'API n\'a pas r√©pondu dans les temps',
          };
        }
        return {
          success: false,
          error: error.message,
        };
      }
      
      return {
        success: false,
        error: 'Erreur inconnue lors de l\'envoi',
      };
    }
  }

  /**
   * Obtenir la liste des candidats depuis l'API
   */
  async getCandidates(): Promise<ApiResponse> {
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), this.timeout);

      const response = await fetch(`${this.baseUrl}/api/candidats`, {
        method: 'GET',
        signal: controller.signal,
        headers: this.getAuthHeaders(),
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Erreur HTTP ${response.status}: ${errorText}`);
      }

      const result = await response.json();
      
      return {
        success: true,
        data: result,
      };

    } catch (error) {
      console.error('‚ùå [Azure Container Apps] Erreur lors de la r√©cup√©ration des candidats:', error);
      
      if (error instanceof Error) {
        if (error.name === 'AbortError') {
          return {
            success: false,
            error: 'Timeout: L\'API n\'a pas r√©pondu dans les temps',
          };
        }
        return {
          success: false,
          error: error.message,
        };
      }
      
      return {
        success: false,
        error: 'Erreur inconnue lors de la r√©cup√©ration',
      };
    }
  }

  /**
   * Analyser un candidat avec l'IA
   */
  async analyzeCandidate(candidateId: string | number): Promise<ApiResponse> {
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), this.timeout);

      const response = await fetch(`${this.baseUrl}/api/candidats/${candidateId}/analyze`, {
        method: 'POST',
        signal: controller.signal,
        headers: this.getAuthHeaders(),
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Erreur HTTP ${response.status}: ${errorText}`);
      }

      const result = await response.json();
      
      return {
        success: true,
        data: result,
      };

    } catch (error) {
      console.error('‚ùå [Azure Container Apps] Erreur lors de l\'analyse:', error);
      
      if (error instanceof Error) {
        if (error.name === 'AbortError') {
          return {
            success: false,
            error: 'Timeout: L\'API n\'a pas r√©pondu dans les temps',
          };
        }
        return {
          success: false,
          error: error.message,
        };
      }
      
      return {
        success: false,
        error: 'Erreur inconnue lors de l\'analyse',
      };
    }
  }

  /**
   * √âvaluer un candidat avec l'IA via la route /evaluate
   */
  async evaluateCandidate(evaluationData: EvaluationRequest): Promise<ApiResponse> {
    try {
      console.log('üîç [Azure Container Apps] √âvaluation du candidat:', evaluationData.candidate_id);
      
      // Pr√©parer les donn√©es au format de l'API RH Eval
      const rhEvalData = {
        id: evaluationData.candidate_id,
        nom: evaluationData.candidate_name || evaluationData.candidate_id.toString(),
        prenom: evaluationData.candidate_firstname || evaluationData.candidate_id.toString(),
        post: evaluationData.job_title,
        cv: evaluationData.cv_content,
        lettre_motivation: evaluationData.cover_letter_content,
        MTP: {
          M: evaluationData.mtp_responses?.metier?.join(', ') || 'Non sp√©cifi√©',
          T: evaluationData.mtp_responses?.talent?.join(', ') || 'Non sp√©cifi√©',
          P: evaluationData.mtp_responses?.paradigme?.join(', ') || 'Non sp√©cifi√©'
        }
      };

      console.log('üì§ [Azure Container Apps] Donn√©es envoy√©es √† l\'API RH Eval:', rhEvalData);
      
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), this.timeout);

      const response = await fetch(`${this.baseUrl}/evaluate`, {
        method: 'POST',
        signal: controller.signal,
        headers: this.getAuthHeaders(),
        body: JSON.stringify(rhEvalData),
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        const errorText = await response.text();
        
        // Gestion sp√©cifique des erreurs d'authentification
        if (response.status === 401) {
          console.warn('‚ö†Ô∏è [Azure Container Apps] Cl√© API invalide - Utilisation du mode test');
          // Retourner des donn√©es simul√©es pour le test
          const mockData = this.generateMockEvaluationData(evaluationData);
          return {
            success: true,
            message: '√âvaluation effectu√©e en mode test (cl√© API invalide)',
            data: mockData,
          };
        } else if (response.status === 403) {
          throw new Error('Erreur d\'autorisation: Acc√®s refus√©');
        } else if (response.status === 422) {
          throw new Error('Erreur de validation: Donn√©es d\'√©valuation invalides');
        } else {
          throw new Error(`Erreur HTTP ${response.status}: ${errorText}`);
        }
      }

      const result: EvaluationResponse = await response.json();
      
      console.log('‚úÖ [Azure Container Apps] √âvaluation r√©ussie:', result);
      console.log('üìä [Azure Container Apps] Donn√©es re√ßues de l\'API RH Eval:', JSON.stringify(result, null, 2));
      console.log('üéØ [Azure Container Apps] Scores:', result.scores);
      console.log('‚öñÔ∏è [Azure Container Apps] Verdict:', result.verdict);
      console.log('üí™ [Azure Container Apps] Forces:', result.forces);
      console.log('‚ö†Ô∏è [Azure Container Apps] Faiblesses:', result.faiblesses);
      console.log('üìù [Azure Container Apps] Justifications:', result.justification);
      console.log('üí¨ [Azure Container Apps] Commentaires:', result.commentaires);
      
      return {
        success: true,
        message: '√âvaluation effectu√©e avec succ√®s',
        data: result,
      };

    } catch (error) {
      console.error('‚ùå [Azure Container Apps] Erreur lors de l\'√©valuation:', error);
      
      // Retourner l'erreur r√©elle sans fallback automatique
      if (error instanceof Error) {
        if (error.name === 'AbortError') {
          return {
            success: false,
            error: 'Timeout: L\'API n\'a pas r√©pondu dans les temps',
          };
        }
        return {
          success: false,
          error: error.message,
        };
      }
      
      return {
        success: false,
        error: 'Erreur inconnue lors de l\'√©valuation',
      };
    }
  }
}

// Instance singleton
export const azureContainerAppsService = new AzureContainerAppsService();
